{"ast":null,"code":"import _classCallCheck from \"/Users/smy/prenuvo/react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/smy/prenuvo/react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/smy/prenuvo/react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/smy/prenuvo/react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/smy/prenuvo/react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/smy/prenuvo/react/src/components/Images.jsx\";\nimport React, { Component } from 'react';\nimport '../sass/styles.css';\nimport gridlist from '../prenuvo_db/grid.json';\nimport axios from 'axios'; // `../prenuvo_db/862625ef/${gridlist[key].path}/1361ae6e/bw-gif.gif`\n// gridlist[key].path\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.onImgLoad = function (_ref) {\n      var img = _ref.target;\n      var imgSizes = _this.state.imgSizes;\n      var obj = {};\n      obj[img.alt] = {\n        width: img.width,\n        height: img.height\n      };\n      imgSizes.push(obj);\n\n      _this.setState({\n        imgSizes: imgSizes\n      }); // console.log('img', obj, imgSizes, img.alt)\n\n    };\n\n    _this.onImgError = function (e) {\n      e.target.src = '/path/no-picture.jpg';\n\n      _this.setState({\n        error: true\n      });\n    };\n\n    _this.state = {\n      error: false,\n      imgList: [],\n      imgSizes: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var keys = Object.keys(gridlist);\n      var imagesFolderNames = keys.map(function (key) {\n        return gridlist[key].path;\n      });\n      var imgList = imagesFolderNames.map(function (path, i) {\n        return React.createElement(\"img\", {\n          src: require(\"../prenuvo_db/862625ef/\".concat(path, \"/bw-gif.gif\")),\n          onLoad: _this2.onImgLoad,\n          refs: path,\n          key: i,\n          alt: path,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        });\n      });\n      this.setState({\n        imgList: imgList\n      }); // console.log(imgList)\n\n      axios.get('http://localhost:3001/list').then(function (response) {\n        console.log('response', response);\n      });\n      axios.get('http://localhost:3001/dimensions').then(function (response) {\n        console.log('response', response);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          width = _this$state.width,\n          height = _this$state.height,\n          error = _this$state.error; // console.log(width, height, error);\n      // console.log(gridlist)\n      // const imgList = this.state.imagesFolderNames.map(\n      //   (path, i) => <img src={require(`../prenuvo_db/862625ef/${path}/bw-gif.gif`)} onLoad={this.onImgLoad} key={i} alt={path} />\n      //   )\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"IMAGES\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.state.imgList));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/smy/prenuvo/react/src/components/Images.jsx"],"names":["React","Component","gridlist","axios","App","props","onImgLoad","img","target","imgSizes","state","obj","alt","width","height","push","setState","onImgError","e","src","error","imgList","keys","Object","imagesFolderNames","map","key","path","i","require","get","then","response","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../sass/styles.css';\nimport gridlist from '../prenuvo_db/grid.json'\nimport axios from 'axios';\n\n// `../prenuvo_db/862625ef/${gridlist[key].path}/1361ae6e/bw-gif.gif`\n// gridlist[key].path\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      imgList: [],\n      imgSizes: [],\n    };\n  }\n\n  componentWillMount() {\n    const keys = Object.keys(gridlist)\n    const imagesFolderNames = keys.map(key => gridlist[key].path)\n    const imgList = imagesFolderNames.map(\n      (path, i) => <img src={require(`../prenuvo_db/862625ef/${path}/bw-gif.gif`)} onLoad={this.onImgLoad} refs={path} key={i} alt={path} />\n      )\n    this.setState({ imgList })\n    // console.log(imgList)\n    axios.get('http://localhost:3001/list')\n    .then((response) => {\n      console.log('response', response)\n    })\n    axios.get('http://localhost:3001/dimensions')\n    .then((response) => {\n      console.log('response', response)\n    })\n  }\n\n  onImgLoad = ({ target: img }) => {\n    const { imgSizes } = this.state\n    const obj = {}\n    obj[img.alt] = {\n        width: img.width,\n        height: img.height,\n      }\n    imgSizes.push(obj)\n    this.setState({\n      imgSizes\n    });\n    // console.log('img', obj, imgSizes, img.alt)\n  }\n\n  onImgError = e => {\n    e.target.src = '/path/no-picture.jpg';\n    this.setState({\n      error: true,\n    });\n  }\n\n  render() {\n    const { width, height, error } = this.state;\n    // console.log(width, height, error);\n    // console.log(gridlist)\n\n    // const imgList = this.state.imagesFolderNames.map(\n    //   (path, i) => <img src={require(`../prenuvo_db/862625ef/${path}/bw-gif.gif`)} onLoad={this.onImgLoad} key={i} alt={path} />\n    //   )\n\n    return (\n      <div>\n       <h1>IMAGES</h1> \n        <div>\n          {this.state.imgList}\n        </div>\n\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}